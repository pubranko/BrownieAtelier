name: Mongo container up
run-name: Mongo container up („Éñ„É©„É≥„ÉÅÂêç:${{ github.ref }}) („Éè„ÉÉ„Ç∑„É•ÂÄ§:${{ github.sha }})
on: 
    # ‰ªñ„ÅÆ„Éï„É≠„Éº„Çà„ÇäÂëº„Å≥Âá∫„Åó
    workflow_call:
        inputs:
            docker-network: 
              # ex) "--network sample-net"
              type: string
              required: false
            path_cache: 
              # ex) "/tmp/docker-img-arch"
              type: string
              required: false
            mongo_tag: 
              # ex) "7.0.1-jammy"
              type: string
              required: false
            
        #   image-name:
        #     type: string
        #     required: true
        #   cluster-name:
        #     type: string
        #     required: true
        #   service-name:
        #     type: string
        #     required: true
        # secrets:
        #   sample-secret-value:
        #     required: true    
    # Github„Çà„ÇäÊâãÂãï„ÅßËµ∑Âãï
    workflow_dispatch:

jobs:
  Prefect-Flow-Test:
    runs-on: ubuntu-22.04
    steps:
      - run: echo "üéâ Ëµ∑Âãï„Ç§„Éô„É≥„Éà„ÅÆÁ®ÆÈ°û (${{ github.event_name }})"

      - name: docker„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Çí„ÉÜ„Çπ„ÉàÁî®„Å´‰ΩúÊàê
        # docker„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Çí‰ΩúÊàê
        run: docker network create brownie-atelier-net

      - name: mongoDBÁî®„Ç≠„É£„ÉÉ„Ç∑„É•ID „ÅÆÂÆöÁæ©
        # „Ç≠„É£„ÉÉ„Ç∑„É•ID „ÅÆÂÆöÁæ©
        id: mongo_image_cache
        uses: actions/cache@v4
        with:
          path: ${{ inputs.path_cache }}
          key: ${{ runner.os }}-mongo-${{ inputs.mongo_tag }}

      - name: mongoDB„ÅÆ„Ç§„É°„Éº„Ç∏„Åå„Ç≠„É£„ÉÉ„Ç∑„É•„Å´„Å™„ÅÑÂ†¥Âêà„Å´pull„Å®save(„Ç≠„É£„ÉÉ„Ç∑„É•)„ÇíÂÆüË°å
          # „Ç≠„É£„ÉÉ„Ç∑„É• ID „ÅÆ‰ΩúÊàê
        if: steps.mongo_image_cache.outputs.cache-hit != 'true'
        run: |
          docker pull mongo:${{ inputs.mongo_tag }}
          docker save mongo:${{ inputs.mongo_tag }} -o ${{ inputs.path_cache }}
          ls -l ${{ inputs.path_cache }}
          docker images

      - name: „Ç≠„É£„ÉÉ„Ç∑„É•„Åã„ÇâmongoDB„Ç§„É°„Éº„Ç∏„ÇíÂæ©ÂÖÉ
        # „Ç≠„É£„ÉÉ„Ç∑„É•„Åã„ÇâmongoDB„Ç§„É°„Éº„Ç∏„ÇíÂæ©ÂÖÉ
        run: |
          docker load -i ${{ inputs.path_cache }}
          docker images

      - name: „ÉÜ„Çπ„ÉàÁî®MongoDB„Ç≥„É≥„ÉÜ„Éä„ÉºËµ∑Âãï
        # mongoDB„Ç≥„É≥„ÉÜ„Éä„Éº„ÅÆ‰ΩúÊàê„ÄÇ
        #   root„É¶„Éº„Ç∂„Éº„ÄÅ‰ΩøÁî®DBÂêç„ÇíÊåáÂÆö„ÄÇ
        #   ‰∏ÄËà¨„É¶„Éº„Ç∂„Éº„Çícreate-user.js„ÅßËá™Âãï‰ΩúÊàê„ÄÇ
        run:  >
          docker run -d
          --name mongo-server
          -p 27017:27017
          ${{ inputs.docker-network }}
          -v $PWD/mongodb/init/create-user.js:/docker-entrypoint-initdb.d/create-user.js
          -e MONGO_INITDB_ROOT_USERNAME=${BROWNIE_ATELIER_MONGO__MONGO_INITDB_ROOT_USERNAME}
          -e MONGO_INITDB_ROOT_PASSWORD=${BROWNIE_ATELIER_MONGO__MONGO_INITDB_ROOT_PASSWORD}
          -e BROWNIE_ATELIER_MONGO__MONGO_USE_DB=${BROWNIE_ATELIER_MONGO__MONGO_USE_DB}
          -e BROWNIE_ATELIER_MONGO__MONGO_USER=${BROWNIE_ATELIER_MONGO__MONGO_USER}
          -e BROWNIE_ATELIER_MONGO__MONGO_PASS=${BROWNIE_ATELIER_MONGO__MONGO_PASS}
          mongo:${MONGO_TAG}

      - run: docker ps -a

      # "üçè This job's status is success."
      - run: echo "üçè ÂÆüË°åÂæå„ÅÆ„Çπ„ÉÜ„Éº„Çø„ÇπÔºö ${{ job.status }}."
