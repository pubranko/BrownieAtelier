name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
on: 
    # 以下のブランチにプッシュされた際起動
    push:
        branches: ["github-actions-test"]
    # Githubより手動で起動
    workflow_dispatch:

# env:
#     AAA: bbb

jobs:
  GitHub-Actions-Test:
    runs-on: ubuntu-22.04
    environment:
      # name: ${{ github.ref }}
      name: TEST
    env:
        ## mongoDB用コンテナーで参照するイメージのタグ
        MONGO_TAG: 7.0.1-jammy
        ## dockerfile_baseで参照するubuntuイメージのタグ
        UBUNTU_TAG: 22.04
        ## # dockerfile_appで参照するbaseイメージのタグ
        BASE_TAG: test-0.15
        # docker-composeで参照するappイメージのタグ
        APP_TAG: test-0.15
        # コンテナー内rootユーザーパスワード
        CONTAINER_ROOT_USER: root_user
        CONTAINER_ROOT_PASS: password
        # コンテナ内の一般ユーザー、パスワード
        CONTAINER_USER: common_user
        CONTAINER_USER_PASS: password
        # ブラウニー工房のgitリモートリポジトリー
        GIT_REMOTE_REPOSITORY: https://github.com/pubranko/BrownieAtelier.git
        # 上記リポジトリーのgitブランチ
        GIT_BRANCH: github-actions-test
        # Firefox の gecko driver
        GECKO_DRIVER: https://github.com/mozilla/geckodriver/releases/download/v0.33.0/geckodriver-v0.33.0-linux64.tar.gz

        # ホスト（ローカル）側のmongoDB接続用のcrtやpemファイルの保管ディレクトリ
        LOCAL_MONGO_KEY_DIR: /tmp

        # docker-compose command選択
        # CONTAINER_START_COMMAND: 'bash -c "sleep 1000000000"'
        # CONTAINER_START_COMMAND: 'bash -c "sleep 60"'
        # CONTAINER_START_COMMAND: '. .venv/bin/activate && cd $HOME/BrownieAtelier/app && python prefect_lib/test_set/github_actions_unit_test.py'
        CONTAINER_START_COMMAND: /home/common_user/BrownieAtelier/sh/github_actions_unit_test.sh

        # mongoDBコンテナー一般ユーザー情報、mongoDB接続情報
        # BROWNIE_ATELIER_MONGO__MONGO_SERVER: mongo
        BROWNIE_ATELIER_MONGO__MONGO_SERVER: mongo-container
        BROWNIE_ATELIER_MONGO__MONGO_PORT: 27017
        BROWNIE_ATELIER_MONGO__MONGO_USE_DB: test_crawler_db
        BROWNIE_ATELIER_MONGO__MONGO_USER: mongo_user
        BROWNIE_ATELIER_MONGO__MONGO_PASS: mongo_pass
        BROWNIE_ATELIER_MONGO__MONGO_TLS: false
        BROWNIE_ATELIER_MONGO__MONGO_TLS_CA_FILE: 
        BROWNIE_ATELIER_MONGO__MONGO_TLS_CERTTIFICATE_KEY_FILE: 
        # mongoDBコンテナーroot情報
        BROWNIE_ATELIER_MONGO__MONGO_INITDB_ROOT_USERNAME: root_user
        BROWNIE_ATELIER_MONGO__MONGO_INITDB_ROOT_PASSWORD: password
        # Email接続情報
        BROWNIE_ATELIER_NOTICE__SMTP_HOST: ${{ secrets.BROWNIE_ATELIER_NOTICE__SMTP_HOST }}
        BROWNIE_ATELIER_NOTICE__SMTP_PORT: ${{ secrets.BROWNIE_ATELIER_NOTICE__SMTP_PORT }}
        BROWNIE_ATELIER_NOTICE__FROM_EMAIL: ${{ secrets.BROWNIE_ATELIER_NOTICE__FROM_EMAIL }}
        BROWNIE_ATELIER_NOTICE__TO_EMAIL: ${{ secrets.BROWNIE_ATELIER_NOTICE__TO_EMAIL }}
        BROWNIE_ATELIER_NOTICE__PASSWORD: ${{ secrets.BROWNIE_ATELIER_NOTICE__PASSWORD }}

        # dummy
        HOST_OS_IP_ADDRESS: 192.0.0.1
        # dummy
        PREFECT_HOME: /home/root_user/BrownieAtelier
        PREFECT_API_URL: 
        PREFECT__API_KEY: 
        PREFECT__WORK_SPACE: 
        PREFECT__WORK_POOL: 
        SCRAPY__LOG_LEVEL: INFO

        # Docker イメージの tar アーカイブ出力先のパス
        PATH_CACHE: /tmp/docker-img-arch
    steps:
      - run: echo "🎉 起動イベントの種類 (${{ github.event_name }})"
      - run: echo "🐧 github上のOSの種類 (${{ runner.os }})"
        # 上記のリポジトリ・ブランチにチェックアウト
      - name: リポジトリ(${{ github.repository }})・ブランチ(${{ github.ref }})にチェックアウト
        uses: actions/checkout@v4

        # テスト前チェックを確認
      - name: ワークスペースチェック
        # クローン後はここにソースが格納される /home/runner/work/BrownieAtelier/BrownieAtelier
        run: |
          ls -a ${{ github.workspace }}

      # インストールされているものの一覧を調べてみた。
      #- run: sudo apt list --installed
      #- run: sudo dpkg-query -l

      # dockerネットワークを作成
      - name: dockerネットワークをテスト用に作成
        run: docker network create brownie-atelier-net

      # キャッシュID の定義
      - name: mongoDB用キャッシュID の定義
        id: mongo_image_cache
        uses: actions/cache@v4
        with:
          path: ${{ env.PATH_CACHE }}
          key: ${{ runner.os }}-localstack-mongo-${{ env.MONGO_TAG }}

        # キャッシュ ID の作成（イメージのハッシュと日付から作成。Windows 非互換。次項を参照）
      - name: mongoDBのイメージがキャッシュにない場合にpullとsave(キャッシュ)を実行
        if: steps.mongo_image_cache.outputs.cache-hit != 'true'
        run: |
          docker pull mongo:${MONGO_TAG}
          docker save mongo:${MONGO_TAG} -o ${{ env.PATH_CACHE }}
          ls -l ${{ env.PATH_CACHE }}
          docker images

      # キャッシュからmongoDBイメージを復元
      - name: キャッシュからmongoDBイメージを復元
        run: |
          docker load -i ${{ env.PATH_CACHE }}
          docker images

      # mongoDBコンテナーの作成。
      #   rootユーザー、使用DB名を指定。
      #   一般ユーザーをcreate-user.jsで自動作成。
      - name: テスト用MongoDBコンテナー起動
        run:  >
          docker run -d
          --name mongo-container
          -p 27017:27017
          --network brownie-atelier-net
          -v $PWD/mongodb/init/create-user.js:/docker-entrypoint-initdb.d/create-user.js
          -e MONGO_INITDB_ROOT_USERNAME=${BROWNIE_ATELIER_MONGO__MONGO_INITDB_ROOT_USERNAME}
          -e MONGO_INITDB_ROOT_PASSWORD=${BROWNIE_ATELIER_MONGO__MONGO_INITDB_ROOT_PASSWORD}
          -e BROWNIE_ATELIER_MONGO__MONGO_USE_DB=${BROWNIE_ATELIER_MONGO__MONGO_USE_DB}
          -e BROWNIE_ATELIER_MONGO__MONGO_USER=${BROWNIE_ATELIER_MONGO__MONGO_USER}
          -e BROWNIE_ATELIER_MONGO__MONGO_PASS=${BROWNIE_ATELIER_MONGO__MONGO_PASS}
          mongo:${MONGO_TAG}

      - run: docker ps -a

      # baseイメージ作成
      - name: baseイメージ作成
        # run: docker-compose -f docker-compose__base-image-build.yml build

        # テスト用にbaseイメージの作成を省略
        # 頭のユーザー名を削除したタグを作成
        run: |
          docker pull mikuras/brownie_atelier_base:$BASE_TAG
          docker tag mikuras/brownie_atelier_base:$BASE_TAG brownie_atelier_base:$BASE_TAG

      # appイメージ作成
      - name: appイメージ作成
        run: docker-compose -f docker-compose__app-image-build.yml build

      # 各種フローテスト
      - name: "<1>各ニュースサイト別スクレイピングの情報登録  <2>定期観測用のスパイダー登録  <3>初回定期観測"
        run: |
          echo -e "### <github_actions_unit_test_01.py 実行> ###"
          export UNIT_TEST_SCRIPT="prefect_lib/github_actions_unit_tests/github_actions_unit_test_01.py"
          docker-compose -f docker-compose__app-container.yml up
          docker logs -f brownie_atelier_app --tail="100"

      - name: "<4>手動クローリング"
        run: |
          echo -e "### <github_actions_unit_test_04.py 実行> ###"
          export UNIT_TEST_SCRIPT="prefect_lib/github_actions_unit_tests/github_actions_unit_test_02.py"
          docker-compose -f docker-compose__app-container.yml up

      - name: "<5>定期観測のON/OFF  <6>定期観測"    
        run: |
          echo -e "### <github_actions_unit_test_02.py 実行> ###"
          export UNIT_TEST_SCRIPT="prefect_lib/github_actions_unit_tests/github_actions_unit_test_03.py"
          docker-compose -f docker-compose__app-container.yml up
          docker logs -f brownie_atelier_app --tail="100"

      - name: "<7>手動スクレイピング  <8>手動ニュースクリップマスター保存"    
        run: |
          echo -e "### <github_actions_unit_test_03.py 実行> ###"
          export UNIT_TEST_SCRIPT="prefect_lib/github_actions_unit_tests/github_actions_unit_test_04.py"
          docker-compose -f docker-compose__app-container.yml up
    
      - name: "<9>Scrapy統計情報集計  <10>Scrapy統計情報レポート"
        run: |
          echo -e "### <github_actions_unit_test_05.py 実行> ###"
          export UNIT_TEST_SCRIPT="prefect_lib/github_actions_unit_tests/github_actions_unit_test_05.py"
          docker-compose -f docker-compose__app-container.yml up

      - name: "<11>スクレイピング使用パターンレポート  <12>同期チェック"
        run: |
          echo -e "### <github_actions_unit_test_06.py 実行> ###"
          export UNIT_TEST_SCRIPT="prefect_lib/github_actions_unit_tests/github_actions_unit_test_06.py"
          docker-compose -f docker-compose__app-container.yml up

      - name: "<13>mongoDBエクスポート  <14>mongoDB削除  <15>mongoDBインポート"
        run: |
          echo -e "### <github_actions_unit_test_06.py 実行> ###"
          export UNIT_TEST_SCRIPT="prefect_lib/github_actions_unit_tests/github_actions_unit_test_07.py"
          docker-compose -f docker-compose__app-container.yml up

      # "🍏 This job's status is success."
      - run: echo "🍏 実行後のステータス： ${{ job.status }}."
